############################
#   zSTART CONFIGURATION   #
############################
zStart:
    #config-version: 1.0
    #setup-mode: true
    #debug-msg: true
    #debug-mode: false 
    # Start the server right as zStart is started.
    # Or manually start it.
    #auto-start: false

#::--CONSOLE--::#
console:
    # Sets the console title.
    title: "Minecraft Server Instance"
    color-mode: HEX
    # Values: HEX, RGB, CODE
    console-color: "#0C0C0C"
    text-color: "#F2F2F2"
    # Sets the server location.
    server-path: "./Server"
    # Loop the server, no matter how the server closes, it will restart.
    # Exit ZStart to stop this loop.
    # (Consider rather configuring spigot.yml's restart-script)
    restart-loop: false
    # Automatically creates and accepts eula.txt.
    auto-eula: true
    # What will happen after the server is stopped.
    # Values: WAIT, PAUSE, NONE
    wait-mode: WAIT
    # Sets how long to WAIT (In seconds).
    wait-timer: 30
    # Enables auto-exiting after wait-mode in false, manually exit.
    exit-on-stop: false
    # Script on the server start
    start-script: "start python ../onServerStart.py"
    # Scrip on the server stop
    stop-script: "start python ../onServerStop.py"

#::--SERVER--::#
server:
    # The name of your server's JAR file.
    # Side note: if you're still using vanilla, bukkit or spigot, if you can, then you should really switch to PaperMC (http://papermc.io)
    # Or one of it's forks, (https://purpur.pl3x.net), (https://ci.pufferfish.host/).
    jar-name: "server.jar"
    # The location of your server's JAR.
    # Be aware that the current directory is now "server-path" but if it fails to find it, it will try in ZStart's directory.
    jar-path: ""
    # Valid Summary Example: (Join jar-path with jar-name)
    # "files/server.jar", "./files/server.jar" 

    # Skips the need of eula.txt = true.
    eula-skip: true
    # Your server's -JAR parameters.
    # In order to see all the parameters, set below --help.
    # (This won't let the server start, but will show all parameters available)
    # More info:
    #   https://minecraft.fandom.com/wiki/Tutorials/Setting_up_a_server
    #   https://bukkit.gamepedia.com/CraftBukkit_Command_Line_Arguments
    #   https://www.spigotmc.org/wiki/start-up-parameters
    parameters: "-nogui"
    # Server's -JAR flags.
    before-jar: "-Dfile.encoding=UTF-8"

#::--JAVA--::#
java:
    # Sets the path of the java binary. (C:\\ProgramFiles\\Java\\bin\\java.exe)
    # You can use this to determine which java you want to use.
    # Consider using java 11 or latest if possible, and changing to OpenJDK.
    # (Change to OpenJDK here! https://adoptopenjdk.net/)
    java-binary: "C:\\Program Files\\Eclipse Adoptium\\jdk-16.0.2.7-hotspot\\bin\\java.exe"
    # Select the memory unit to be used.
    # Values: KB, MB, GB.
    heap-unit: MB
    # Allocate the server's max and min heap-memory.
    # If you want to allocate more than 4GB you will need Java 64 bits.
    # For how the garbage collectors work, it's better to allocate minimum matching maximum memory.
    # Unused memory is wasted memory!!!. They work better with more memory, lesser GC work necessary.
    max-memory: 4096
    min-memory: 4096
    memory-percent: 100

    # Instructions:
    # You can modify this as you please, remove or add new group flags.
    # (https://yaml-multiline.info/) (https://codebeautify.org/yaml-validator)
    # Just follow the YAML rules. ZStart accepts:
    #  "list: -XX:Flag1 -XX:Flag2"
    #  "list:   
    #    - -XX:Flag1
    #    - -XX:Flag2 XX:Flag3"
    #  "list: >-
    #    -XX:Flag1
    #    -XX:Flag2 -XX:Flag3"
    
    #::--FLAGS--::#
    # (https://docs.oracle.com/cd/E13150_01/jrockit_jvm/jrockit/geninfo/diagnos/memman.html)
    # (https://forums.spongepowered.org/t/optimized-startup-flags-for-consistent-garbage-collection/13239)
    # Timezone flag: -Duser.timezone="America/New_York" (https://garygregory.wordpress.com/2013/06/18/what-are-the-java-timezone-ids/)
    flags:
    #:: DEFAULTS: Always enabled, independently of other group flags.
    #:: NOTE: This currently won't override other flags, do it manually.
        defaults: 
            - -XX:+DisableExplicitGC
    #:: List of enabled group flags. (Separated by ','): G1GC, G1Ex
        enabled: G1GC
    # :: [Recommended] G1GC: Aikar's G1GC flags. (https://mcflags.emc.gs)
    #            (Java's default first garbage collector) 
    #       (https://www.oracle.com/technical-resources/articles/java/g1gc.html)
    #       (https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/)
    #    Minecraft's favorite garbage collector, the most applicable on most servers if configured correctly.
    #    Aikar's flags are a good start, but every computer is different and you might want to change something.
    #    Do not change if you don't know what you're doing. Aikar's flags have been tested roughly to achieve the best of G1GC. 
        G1GC:
            list: >-
                -XX:+UseG1GC
                -XX:+ParallelRefProcEnabled
                -XX:MaxGCPauseMillis=200
                -XX:+UnlockExperimentalVMOptions
                -XX:-DisableExplicitGC
                -XX:+AlwaysPreTouch
                -XX:G1NewSizePercent=30
                -XX:G1MaxNewSizePercent=40
                -XX:G1HeapRegionSize=8M
                -XX:G1ReservePercent=20
                -XX:G1HeapWastePercent=5
                -XX:G1MixedGCCountTarget=4
                -XX:InitiatingHeapOccupancyPercent=15
                -XX:G1MixedGCLiveThresholdPercent=90
                -XX:G1RSetUpdatingPauseTimePercent=5
                -XX:SurvivorRatio=32
                -XX:+PerfDisableSharedMem
                -XX:MaxTenuringThreshold=1
                -Dusing.aikars.flags=https://mcflags.emc.gs
                -Daikars.new.flags=true
        # NOTE: If you are using an Xmx value bigger than 12GB, use this instead.
        # -XX:G1NewSizePercent=40 -XX:G1MaxNewSizePercent=50 -XX:G1HeapRegionSize=16M -XX:G1ReservePercent=15 | -XX:InitiatingHeapOccupancyPercent=20
        G1GC+12:
            list: >-
                -XX:+UseG1GC
                -XX:+ParallelRefProcEnabled
                -XX:MaxGCPauseMillis=200
                -XX:+UnlockExperimentalVMOptions
                -XX:+DisableExplicitGC
                -XX:+AlwaysPreTouch
                -XX:G1NewSizePercent=40
                -XX:G1MaxNewSizePercent=50
                -XX:G1HeapRegionSize=16M
                -XX:G1ReservePercent=15
                -XX:G1HeapWastePercent=5
                -XX:G1MixedGCCountTarget=4
                -XX:InitiatingHeapOccupancyPercent=20
                -XX:G1MixedGCLiveThresholdPercent=90
                -XX:G1RSetUpdatingPauseTimePercent=5
                -XX:SurvivorRatio=32
                -XX:+PerfDisableSharedMem
                -XX:MaxTenuringThreshold=1
                -Dusing.aikars.flags=https://mcflags.emc.gs
                -Daikars.new.flags=true
    #:: ShenandoahGC: Custom based Shenandoah flags. (https://wiki.openjdk.java.net/display/shenandoah/Main)
    #            (LTS for JDK: 8, 11, 17), (Unsupported/Discontinued the rest) (Latest is better) 
    #    (https://www.reddit.com/r/feedthebeast/comments/r24zg4/upgrade_your_java_to_one_that_has_the_shenandoah/)
    #    Shenandoah, a promising garbage collector, but it gains most of it's boost on memory quantity. 
    #    More than 16GB there are no much gains on performance.
        Shenandoah:
            list: >-
                -XX:+UseShenandoahGC
                -XX:-UseG1GC
                -XX:-UseParallelGC
                -XX:+ParallelRefProcEnabled
                -XX:+UnlockExperimentalVMOptions
                -XX:+DisableExplicitGC
                -XX:+AlwaysPreTouch
                -XX:InitiatingHeapOccupancyPercent=15
                -XX:SurvivorRatio=32
                -XX:+PerfDisableSharedMem
                -XX:MaxTenuringThreshold=1
                -XX:+IgnoreUnrecognizedVMOptions
                -XX:+UseDynamicNumberOfGCThreads
                -Dusing.aikars.flags=https://mcflags.emc.gs
                -Daikars.new.flags=true
    #:: ZGC: Custom based ZGC flags. (https://wiki.openjdk.java.net/display/zgc/Main)
    #            (LTS for JDK: 8, 11, 17), (Decent since JDK15) (Latest is better)
    #    ZGC is a great garbage collector, but this mostly applies for multi-threading applications, and Minecraft is NOT one of these.
    #    Works best with 12GB+ and with multiple cores.
        ZGC: 
            # -XX:-UseParallelOldGC is obsolete since JDK15.
            list: >-
                -XX:+UseG1GC
                -XX:-UseG1GC
                -XX:-UseParallelGC
                -XX:+ParallelRefProcEnabled
                -XX:+UnlockExperimentalVMOptions
                -XX:+DisableExplicitGC
                -XX:+AlwaysPreTouch
                -XX:InitiatingHeapOccupancyPercent=15
                -XX:SurvivorRatio=32
                -XX:+PerfDisableSharedMem
                -XX:MaxTenuringThreshold=1
                -XX:+IgnoreUnrecognizedVMOptions
                -XX:+UseDynamicNumberOfGCThreads
                -Dusing.aikars.flags=https://mcflags.emc.gs
                -Daikars.new.flags=true
        
        ZGC-Extras:
            list: >-
                -XX:-OmitStackTraceInFastThrow
                -XX:+UnlockDiagnosticVMOptions
                -XX:+ShowCodeDetailsInExceptionMessages
                -XX:-ZUncommit
                -XX:ZUncommitDelay=300
                -XX:ZCollectionInterval=5
                -XX:ZAllocationSpikeTolerance=2.0
        # LargePages need to be supported and enabled by the system (https://www.chaoticafractals.com/manual/getting-started/enabling-large-page-support-windows)
        # Enabling this on Linux is an advanced level task that can render you system unbootable if not done correctly.
        # You have to edit the Kernel boot parameters in GRUB. There is two ways to do this dynamic allocation and static boot allocation.
        # I didn't see any gains using dynamic so I enabled static allocation on boot. Your mileage may vary.
        LargePages:
            list: >-
                -XX:+UseLargePages
                -XX:LargePageSizeInBytes=2M
                -XX:+UseTransparentHugePages
        ZGC-Experimental:
            list: >-
                -XX:+ExitOnOutOfMemoryError
                -XX:-DontCompileHugeMethods
                -XX:+TrustFinalNonStaticFields
                -XX:+UseFastUnorderedTimeStamps
                -XX:+UseCMoveUnconditionally
                -XX:+UseNewLongLShift
                -XX:+UseVectorCmov
                -XX:+UseXmmI2D
                -XX:+UseXmmI2F