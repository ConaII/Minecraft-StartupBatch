############################
#   zSTART CONFIGURATION   #
############################
zStart:
    config-version: 1.0
    first-start: false
    debug-msg: true
    debug-mode: false 
    debug-start: false

#::--CONSOLE--::#
console:
    # Sets the console title.
    title: "Minecraft Server Instance"
    color-mode: HEX
    console-color: "#0C0C0C"
    # Sets the server location.
    server-path: "./"
    # Loop the server, no matter how the server closes, it will restart.
    # Exit ZStart to stop this loop.
    # (Consider rather configuring spigot.yml's restart-script)
    restart-loop: true
    # Start the server right as zStart is started.
    # Or manually start it.
    auto-start: false
    # Automatically creates and accepts eula.txt.
    auto-eula: true
    # What will happen after the server is stopped.
    # Values: WAIT, PAUSE, NONE
    wait-mode: WAIT
    # Sets how long to WAIT.
    wait-timer: 30
    # Enables exiting after wait-mode.
    exit-on-stop: true

#::--SERVER--::#
server:
    # The name of your server's JAR file.
    # Side note: if you're still using vanilla, bukkit or spigot, if you can, then you should really switch to PaperMC (http://papermc.io)
    # Or one of it's forks, (https://purpur.pl3x.net)
    jar-name: "server.jar"
    # The location of your server's JAR.
    jar-path: "./"
    # Skips the need of eula.txt = true.
    eula-skip: true
    # Your server's -JAR parameters.
    # In order to see all the parameters, set below --help.
    # (This won't let the server start, but will show all parameters available)
    # More info:
    #   https://minecraft.fandom.com/wiki/Tutorials/Setting_up_a_server
    #   https://bukkit.gamepedia.com/CraftBukkit_Command_Line_Arguments
    #   https://www.spigotmc.org/wiki/start-up-parameters
    parameters: "-nogui"
    # Server's -JAR flags.
    before-jar: "-Dfile.encoding=UTF-8"

#::--JAVA--::#
java:
    # Sets the path of the java binary. (bin\java.exe)
    # You can use this to determine which java you want to use.
    # Consider using java 11 or latest if possible, and changing to OpenJDK.
    # (Change to OpenJDK here! https://adoptopenjdk.net/)
    java-binary: "C:\\Program Files\\Eclipse Adoptium\\jdk-16.0.2.7-hotspot\\bin\\java.exe"
    # Select the memory unit to be used.
    # Values: KB, MB, GB.
    heap-unit: MB
    # Allocate the server's max&min heap-memory.
    # If you want to allocate more than 4GB you will need Java 64 bits.
    max-memory: 4096
    min-memory: 4096
    memory-percent: 100
    #
    # Instructions:
    # Be sure to remove any flag that is already on DEFAULTS
    # You can modify this as you please, remove or add new group flags.
    # To toggle a group flag, just set true/false.
    # To add multiple flags in one line, add "- flags: (-flags)"
    # Else, add one flag per line with "- (flag)"
    # (https://docs.oracle.com/cd/E13150_01/jrockit_jvm/jrockit/geninfo/diagnos/memman.html)
    
    #::--FLAGS--::#
    flags:
    #:: DEFAULTS: Always enabled, independently of other group flags.
        defaults: 
            - -XX:+DisableExplicitGC
    #:: List of enabled flags. (Separated by ',')
        enabled: G1GC

    # :: [Recommended] G1GC: Aikar's G1GC flags. (https://mcflags.emc.gs)
    #            (Java's default first garbage collector) 
    #       (https://www.oracle.com/technical-resources/articles/java/g1gc.html)
    #       (https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/)
    #    Minecraft's favorite garbage collector, the most applicable on most servers if configured correctly.
    #    Aikar's flags are a good start, but every computer is different and you might want to change something.
    #    Do not change if you don't know. Aikar's flags have been tested roughly to achieve the best of G1GC. 
        G1GC:
            list: >-
                -XX:+ParallelRefProcEnabled
                -XX:+AlwaysPreTouch
    #:: ShenandoahGC: Custom based Shenandoah flags. (https://wiki.openjdk.java.net/display/shenandoah/Main)
    #            (LTS for JDK: 8, 11, 17), (Unsupported/Discontinued the rest) (Latest is better) 
    #    Shenandoah, a promising garbage collector, but it gains most of it's boost on memory quantity. 
    #    More than 16GB there are no much gains on performance.
        Shenandoah:
            list: >-
                -XX:+ParallelRefProcEnabled
                -XX:+AlwaysPreTouch
    #:: ZGC: Custom based ZGC flags. (https://wiki.openjdk.java.net/display/zgc/Main)
    #            (LTS for JDK: 8, 11, 17), (Decent since JDK15) (Latest is better)
    #    ZGC is a great garbage collector, but this mostly applies for multi-threading applications, and Minecraft is NOT one of these.
    #    Works best with 12GB+ and with multiple cores.
        ZGC:
            list: >-
                -XX:+ParallelRefProcEnabled
                -XX:+AlwaysPreTouch